/**
 * TRS-80 Model 100 Font System
 * Contains the complete 5x7 pixel font data and character rendering
 */

// TRS-80 Model 100 6x8 Font Data (with built-in spacing)
window.FONT_DATA = {
  // GRPH test: copy GRPH glyphs into CHR$(1)–CHR$(33)
  '\x01': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x83'],
  '\x02': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x84'],
  '\x03': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x85'],
  '\x04': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x86'],
  '\x05': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x87'],
  '\x06': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x88'],
  '\x07': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x89'],
  '\x08': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x8A'],
  '\x09': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x8B'],
  '\x0A': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x8C'],
  '\x0B': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x8D'],
  '\x0C': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x8E'],
  '\x0D': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x8F'],
  '\x0E': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x90'],
  '\x0F': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x91'],
  '\x10': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x92'],
  '\x11': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x93'],
  '\x12': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x94'],
  '\x13': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x95'],
  '\x14': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x96'],
  '\x15': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x97'],
  '\x16': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x98'],
  '\x17': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x99'],
  '\x18': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x9A'],
  '\x19': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x9B'],
  '\x1A': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x9C'],
  '\x1B': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x9D'],
  '\x1C': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x9E'],
  '\x1D': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\x9F'],
  '\x1E': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\xA0'],
  '\x1F': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\xA1'],
  '\x20': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\xA2'],
  '\x21': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\xA3'],
  '\x22': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\xA4'],
  '\x23': window.FONT_DATA_GRPH && window.FONT_DATA_GRPH['\xA5'],
  // Control characters 1-31 (special TRS-80 graphics)
  '\x01': [0x78,0x76,0x62,0x4A,0x0E,0x00,0xEE,0x44], // CHR$(1) - Smiley face ☺ (shifted right)
  '\x02': [0xFF,0xFF,0x44,0xEE,0x0C,0x4C,0x7F,0x4C], // CHR$(2) - Filled smiley ☻
  '\x03': [0x6C, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x10, 0x00], // CHR$(3) - Heart ♥
  '\x04': [0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x10, 0x00], // CHR$(4) - Diamond ♦
  '\x05': [0x38, 0x7C, 0x38, 0xFE, 0xFE, 0x7C, 0x38, 0x7C], // CHR$(5) - Club ♣
  '\x06': [0x10, 0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x7C], // CHR$(6) - Spade ♠
  '\x07': [0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00], // CHR$(7) - Bullet •
  '\x08': [0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF], // CHR$(8) - Inverse bullet ◘
  '\x09': [0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00], // CHR$(9) - Circle ○
  '\x0A': [0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF], // CHR$(10) - Inverse circle ◙
  '\x0B': [0x0F, 0x07, 0x0F, 0x7D, 0xCC, 0xCC, 0xCC, 0x78], // CHR$(11) - Male symbol ♂
  '\x0C': [0x3C, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18], // CHR$(12) - Female symbol ♀
  '\x0D': [0x3F, 0x33, 0x3F, 0x30, 0x30, 0x70, 0xF0, 0xE0], // CHR$(13) - Musical note ♪
  '\x0E': [0x7F, 0x63, 0x7F, 0x63, 0x63, 0x67, 0xE6, 0xC0], // CHR$(14) - Double note ♫
  '\x0F': [0x99, 0x5A, 0x3C, 0xE7, 0xE7, 0x3C, 0x5A, 0x99], // CHR$(15) - Sun ☼
  '\x10': [0x80, 0xE0, 0xF8, 0xFE, 0xF8, 0xE0, 0x80, 0x00], // CHR$(16) - Right arrow ►
  '\x11': [0x02, 0x0E, 0x3E, 0xFE, 0x3E, 0x0E, 0x02, 0x00], // CHR$(17) - Left arrow ◄
  '\x12': [0x18, 0x3C, 0x7E, 0x18, 0x18, 0x7E, 0x3C, 0x18], // CHR$(18) - Up/Down arrow ↕
  '\x13': [0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00], // CHR$(19) - Double exclamation ‼
  '\x14': [0x7F, 0xDB, 0xDB, 0x7B, 0x1B, 0x1B, 0x1B, 0x00], // CHR$(20) - Paragraph ¶
  '\x15': [0x3E, 0x63, 0x38, 0x6C, 0x6C, 0x38, 0xCC, 0x78], // CHR$(21) - Section §
  '\x16': [0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x7E, 0x00], // CHR$(22) - Rectangle ▬
  '\x17': [0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x00], // CHR$(23) - Up arrow ↑
  '\x18': [0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00], // CHR$(24) - Down arrow ↓
  '\x19': [0x00, 0x18, 0x0C, 0xFE, 0x0C, 0x18, 0x00, 0x00], // CHR$(25) - Right arrow →
  '\x1A': [0x00, 0x30, 0x60, 0xFE, 0x60, 0x30, 0x00, 0x00], // CHR$(26) - Left arrow ←
  '\x1B': [0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xFE, 0x00, 0x00], // CHR$(27) - Angle ∟
  '\x1C': [0x00, 0x24, 0x66, 0xFF, 0x66, 0x24, 0x00, 0x00], // CHR$(28) - Left-right arrow ↔
  '\x1D': [0x00, 0x18, 0x3C, 0x7E, 0xFF, 0xFF, 0x00, 0x00], // CHR$(29) - Up triangle ▲
  '\x1E': [0x00, 0xFF, 0xFF, 0x7E, 0x3C, 0x18, 0x00, 0x00], // CHR$(30) - Down triangle ▼
  '\x1F': [0x00, 0x10, 0x38, 0xFE, 0x38, 0x28, 0x44, 0x00], // CHR$(31) - Airplane ✈
  
  // Standard ASCII characters (32-126)  
  ' ': [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
  '!': [0x08, 0x08, 0x08, 0x08, 0x00, 0x08, 0x00, 0x00],
  '"': [0x14, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00],
  '#': [0x14, 0x14, 0x3E, 0x14, 0x3E, 0x14, 0x14, 0x00],
  '$': [0x08, 0x1E, 0x28, 0x1C, 0x0A, 0x3C, 0x08, 0x00],
  '%': [0x30, 0x32, 0x04, 0x08, 0x10, 0x26, 0x06, 0x00],
  '&': [0x18, 0x24, 0x28, 0x10, 0x2A, 0x24, 0x1A, 0x00],
  '\'': [0x18, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00],
  '(': [0x04, 0x08, 0x10, 0x10, 0x10, 0x08, 0x04, 0x00],
  ')': [0x10, 0x08, 0x04, 0x04, 0x04, 0x08, 0x10, 0x00],
  '*': [0x00, 0x08, 0x2A, 0x1C, 0x2A, 0x08, 0x00, 0x00],
  '+': [0x00, 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00, 0x00],
  ',': [0x00, 0x00, 0x00, 0x00, 0x18, 0x08, 0x10, 0x00],
  '-': [0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00],
  '.': [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00],
  '/': [0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00],
  '0': [0x1C, 0x22, 0x26, 0x2A, 0x32, 0x22, 0x1C, 0x00],
  '1': [0x08, 0x18, 0x08, 0x08, 0x08, 0x08, 0x1C, 0x00],
  '2': [0x1C, 0x22, 0x02, 0x04, 0x08, 0x10, 0x3E, 0x00],
  '3': [0x3E, 0x04, 0x08, 0x04, 0x02, 0x22, 0x1C, 0x00],
  '4': [0x04, 0x0C, 0x14, 0x24, 0x3E, 0x04, 0x04, 0x00],
  '5': [0x3E, 0x20, 0x3C, 0x02, 0x02, 0x22, 0x1C, 0x00],
  '6': [0x0C, 0x10, 0x20, 0x3C, 0x22, 0x22, 0x1C, 0x00],
  '7': [0x3E, 0x02, 0x04, 0x08, 0x10, 0x10, 0x10, 0x00],
  '8': [0x1C, 0x22, 0x22, 0x1C, 0x22, 0x22, 0x1C, 0x00],
  '9': [0x1C, 0x22, 0x22, 0x1E, 0x02, 0x04, 0x18, 0x00],
  ':': [0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00],
  ';': [0x00, 0x18, 0x18, 0x00, 0x18, 0x08, 0x10, 0x00],
  '<': [0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x00],
  '=': [0x00, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x00, 0x00],
  '>': [0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x00],
  '?': [0x1C, 0x22, 0x02, 0x04, 0x08, 0x00, 0x08, 0x00],
  '@': [0x1C, 0x22, 0x02, 0x1A, 0x2A, 0x2A, 0x1C, 0x00],
  'A': [0x1C, 0x22, 0x22, 0x22, 0x3E, 0x22, 0x22, 0x00],
  'B': [0x3C, 0x22, 0x22, 0x3C, 0x22, 0x22, 0x3C, 0x00],
  'C': [0x1C, 0x22, 0x20, 0x20, 0x20, 0x22, 0x1C, 0x00],
  'D': [0x38, 0x24, 0x22, 0x22, 0x22, 0x24, 0x38, 0x00],
  'E': [0x3E, 0x20, 0x20, 0x3C, 0x20, 0x20, 0x3E, 0x00],
  'F': [0x3E, 0x20, 0x20, 0x3C, 0x20, 0x20, 0x20, 0x00],
  'G': [0x1C, 0x22, 0x20, 0x2E, 0x22, 0x22, 0x1E, 0x00],
  'H': [0x22, 0x22, 0x22, 0x3E, 0x22, 0x22, 0x22, 0x00],
  'I': [0x1C, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1C, 0x00],
  'J': [0x0E, 0x04, 0x04, 0x04, 0x04, 0x24, 0x18, 0x00],
  'K': [0x22, 0x24, 0x28, 0x30, 0x28, 0x24, 0x22, 0x00],
  'L': [0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3E, 0x00],
  'M': [0x22, 0x36, 0x2A, 0x2A, 0x22, 0x22, 0x22, 0x00],
  'N': [0x22, 0x22, 0x32, 0x2A, 0x26, 0x22, 0x22, 0x00],
  'O': [0x1C, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1C, 0x00],
  'P': [0x3C, 0x22, 0x22, 0x3C, 0x20, 0x20, 0x20, 0x00],
  'Q': [0x1C, 0x22, 0x22, 0x2A, 0x26, 0x22, 0x1E, 0x00],
  'R': [0x3C, 0x22, 0x22, 0x3C, 0x28, 0x24, 0x22, 0x00],
  'S': [0x1E, 0x20, 0x20, 0x1C, 0x02, 0x02, 0x3C, 0x00],
  'T': [0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00],
  'U': [0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1C, 0x00],
  'V': [0x22, 0x22, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00],
  'W': [0x22, 0x22, 0x22, 0x2A, 0x2A, 0x36, 0x22, 0x00],
  'X': [0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22, 0x00],
  'Y': [0x22, 0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x00],
  'Z': [0x3E, 0x02, 0x04, 0x08, 0x10, 0x20, 0x3E, 0x00],
  '[': [0x1C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1C, 0x00],
  '\\': [0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00],
  ']': [0x1C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x1C, 0x00],
  '^': [0x08, 0x14, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00],
  '_': [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00],
  '`': [0x10, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00],
  'a': [0x00, 0x00, 0x1C, 0x02, 0x1E, 0x22, 0x1E, 0x00],
  'b': [0x20, 0x20, 0x2C, 0x32, 0x22, 0x22, 0x3C, 0x00],
  'c': [0x00, 0x00, 0x1C, 0x20, 0x20, 0x22, 0x1C, 0x00],
  'd': [0x02, 0x02, 0x1A, 0x26, 0x22, 0x22, 0x1E, 0x00],
  'e': [0x00, 0x00, 0x1C, 0x22, 0x3E, 0x20, 0x1C, 0x00],
  'f': [0x0C, 0x12, 0x10, 0x38, 0x10, 0x10, 0x10, 0x00],
  'g': [0x00, 0x00, 0x1E, 0x22, 0x1E, 0x02, 0x1C, 0x00],
  'h': [0x20, 0x20, 0x2C, 0x32, 0x22, 0x22, 0x22, 0x00],
  'i': [0x08, 0x00, 0x18, 0x08, 0x08, 0x08, 0x1C, 0x00],
  'j': [0x04, 0x00, 0x0C, 0x04, 0x04, 0x24, 0x18, 0x00],
  'k': [0x20, 0x20, 0x24, 0x28, 0x30, 0x28, 0x24, 0x00],
  'l': [0x18, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1C, 0x00],
  'm': [0x00, 0x00, 0x34, 0x2A, 0x2A, 0x22, 0x22, 0x00],
  'n': [0x00, 0x00, 0x2C, 0x32, 0x22, 0x22, 0x22, 0x00],
  'o': [0x00, 0x00, 0x1C, 0x22, 0x22, 0x22, 0x1C, 0x00],
  'p': [0x00, 0x00, 0x3C, 0x22, 0x3C, 0x20, 0x20, 0x00],
  'q': [0x00, 0x00, 0x1A, 0x26, 0x1E, 0x02, 0x02, 0x00],
  'r': [0x00, 0x00, 0x2C, 0x32, 0x20, 0x20, 0x20, 0x00],
  's': [0x00, 0x00, 0x1C, 0x20, 0x1C, 0x02, 0x3C, 0x00],
  't': [0x10, 0x10, 0x38, 0x10, 0x10, 0x12, 0x0C, 0x00],
  'u': [0x00, 0x00, 0x22, 0x22, 0x22, 0x26, 0x1A, 0x00],
  'v': [0x00, 0x00, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00],
  'w': [0x00, 0x00, 0x22, 0x22, 0x2A, 0x2A, 0x14, 0x00],
  'x': [0x00, 0x00, 0x22, 0x14, 0x08, 0x14, 0x22, 0x00],
  'y': [0x00, 0x00, 0x22, 0x22, 0x1E, 0x02, 0x1C, 0x00],
  'z': [0x00, 0x00, 0x3E, 0x04, 0x08, 0x10, 0x3E, 0x00],
  '{': [0x04, 0x08, 0x08, 0x10, 0x08, 0x08, 0x04, 0x00],
  '|': [0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00],
  '}': [0x10, 0x08, 0x08, 0x04, 0x08, 0x08, 0x10, 0x00],
  '~': [0x00, 0x00, 0x00, 0x18, 0x24, 0x0C, 0x00, 0x00]
};

/**
 * Render a character at the specified position using solid pixel blocks
 * @param {CanvasRenderingContext2D} ctx - Canvas rendering context
 * @param {string} char - Character to render
 * @param {number} x - X position in pixels
 * @param {number} y - Y position in pixels  
 * @param {number} pixelSize - Size of each font pixel (typically 4px)
 * @param {string} color - Fill color for active pixels
 */
window.drawChar = function(ctx, char, x, y, pixelSize, color) {
  // Use vertical column font data for 6x8 grid (supports extended codes)
  let fontData = window.FONT_DATA_VERTICAL[char];

  // Fallback: if character code >=128 and not found, try mapping through code point
  if (!fontData) {
    const code = char.charCodeAt(0);
    // Example: ensure 131 maps to \x83 explicitly (alias) if missing
    if (code === 131 && window.FONT_DATA_VERTICAL['\x83']) {
      fontData = window.FONT_DATA_VERTICAL['\x83'];
    }
  }

  if (!fontData) {
    if (!window.__MISSING_GLYPHS_LOGGED) window.__MISSING_GLYPHS_LOGGED = new Set();
    const code = char.charCodeAt(0);
    if (!window.__MISSING_GLYPHS_LOGGED.has(code)) {
      console.warn('Missing glyph for char code', code, 'literal:', JSON.stringify(char));
      window.__MISSING_GLYPHS_LOGGED.add(code);
    }
    return; // Nothing to draw
  }

  ctx.fillStyle = color;
  for (let col = 0; col < 6; col++) {
    const colData = fontData[col];
    for (let row = 0; row < 8; row++) {
      if (colData & (1 << row)) {
        const pixelX = x + col * pixelSize;
        const pixelY = y + row * pixelSize;
        ctx.fillRect(pixelX, pixelY, pixelSize, pixelSize);
      }
    }
  }
}